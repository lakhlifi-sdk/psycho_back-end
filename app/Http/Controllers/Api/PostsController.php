<?phpnamespace App\Http\Controllers\Api;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use App\Post;use Auth;use Storage;class PostsController extends Controller{        public function posts(){                $posts=Post::orderBy('id','desc')->get();                foreach($posts as $post){                //get user of post                    $post->user;                 //commentCount                 $post['commentsCount']=count($post->comments);                 //likes count                 $post['likesCount']=count($post->likes);                 //check if user like his oun post                 $post['selfLike']=false;                 foreach($post->likes as $like){                     if($like->user_id==Auth::user()->id){                     $post['selfLike']=true;                     }                 }                }                return response()->json([                    'success'=>true,                    'posts'=>$posts                ]);             }    public function create(Request $request){        $post=new Post;        try{        $post->user_id=Auth::user()->id;        //photo        if($request->photo!=''){        $photo=time().'.jpg';        file_put_contents('storage/posts/'.$photo,base64_decode($request->photo));        $post->photo=$photo;                }                $post->desc=$request->desc;        $post->save();        return $this->posts();                 }catch(Exception $e){        return response()->json([            'success'=>true,            'error'=>$e        ]);        }    }    public function update(Request $request){    $post=Post::find($request->id);    if(Auth::user()->id != $request->id){        return response()->json([        "success"=>false,        "message"=>"unautorized access"        ]);    }else{    $post->desc=$request->desc;    $post->update();    return response()->json([        "success"=>true,        'edit'=>'post edited',        "message"=>$this->posts()        ]);    }            }    //////////delete//////////////    public function delete(Request $request){    $post=Post::find($request->id);    if(Auth::user()->id != $request->id){    return response()->json([        "success"=>folse,        "message"=>"not deleted"        ]);    }else{    if($post->photo!=''){        Storage::delete('public/posts/'.$post->photo);    }    $post->delete();        return response()->json([        "success"=>true,        "message"=>"is deleted"        ]);       }                        }    }